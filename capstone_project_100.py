# -*- coding: utf-8 -*-
"""Capstone Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wd2dr4_Py8856VpUMo0x1QRRtEQifJUv

## **1 Introduction**
In the capstone project, we performed EDA (Exploratory Data Analysis) on the data by using some python libraries (Pandas, numpy, matplotlib and seaborn). This Yellow Taxi trip data taken from New York city. There are many field in the data.

### **1.1 Import Libraries**
Here, we use some python libraries for manipulation of data. These libraries make easy for manipulation and analysis of the data which are as given below-

*   **Pandas -** Pandas library is used for manipulation of data.
*   **Numpy -** Numpy library is used to perform on matrix or array and fast execution code
*   **Matplotlib -** This library is used for data visualization.
*   **Seaborn -** Seaborn is also used for data visualization with more attractive and effecftive way
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""### **1.2 Load data**
I have **Yello Taxi Trip Records Data** in csv file (comma seprated file or flat file). This file is look like excel sheet but there are only **one sheet** in csv file.

Here, we are load the data using pandas method pd.read_csv() which is used to extract the knowledge or useful information or EDA.
"""

data = pd.read_csv('/content/drive/My Drive/Capstone Project/yellow_tripdata_2019-12.csv')

"""There are many attributes or fields of Yello Taxi Trip Record data as follow

*  **VendorID -** The venfor ID
*  **tpep_pickup_datetime -** Pickup date and time 
* **tpep_dropoff_datetime -** Drop off date and time
* **passenger_count -** Number of passenger at a time
* **trip_distance -** Distance between pickup and dropoff location 
* **RatecodeID -** The rate code ID
* **store_and_fwd_flag -** Store and forword flag
* **PULocationID -** Pickup location ID
* **DOLocationID -** Dropoff location ID
* **payment_type -** Payment method
* **fare_amount -** Fare amount of the trip
* **extra -** Extra charges
* **mta_tax -** MTA Tax
* **tip_amount -** Tip amount
* **tolls_amount -** Toll amount
* **improvement_surcharge -** Improvement surcharge
* **total_amount -** Total amount of the trip
* **congestion_surcharge -** Congestion surcharge

### **1.3 Basic information about the data**
Here, I extract the basic information about the data.
*   Number of rows
*   Number of columns
*   Dimension of the data
*   Size of the data
*   Shape of data
*   Columns name
*   Index range
*   Data type of columns
"""

print('Number of rows- ', data.shape[0])
print('Number of columns- ',data.shape[1])
print('size of data- ',data.size)
print('Dimension of data- ',data.ndim)

print('shape of data: ',data.shape)

data.dtypes

print('columns of data - ')
for column in data.columns:
  print(column)

print('Index of data-',data.index)

"""#### **Conclusion**
*   In this data, there are 6896317 rows and 18 columns.
*   The columns names of the data are  VendorID, tpep_pickup_datetime, tpep_dropoff_time, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount and congestion_surcharge.
*   In this data, the fields or columns contain 13 float data type column, 2 integer data type, and 3 object data type columns.
*   The index of data is start from zero(0) and end at 6896316.

### **1.4 File structure and content**
Here, we see the structure of data, sample of data, and some statistic of data.
"""

data.describe()

data.head()

data.sample(10)

data.tail()

"""#### **Conclusion**
*   VendorID contain only two values 1.0 and 2.0, it indicate that there are two taxi companies in New York city.
*   The taxi can provide services minimum 1 person and maximum 9 person at a time.
*   There are five method to pay amount for the services by customer to taxi driver
*   The field store_and_fwd_flag contain only "N" and "Y".
"N" indicates that the trip data was sent immediately and "Y" indecates that held in the memory of taxi.
*   The taxi always available either day or night.
*   The data have missing value which is not good for analysiss of the data.

### **1.5 Missing value**
Missing value is important to know of the data because it create many issues for extracting useful information, good analysis of data, creation of best model and so on.
Many modelling procedures break down when missing values are involved and the corresponding rows will either have to be removed completely or the values need to be estimated somehow.

If data have missing values then remove or fill those missing value accoring to data or challenge or goal with  data.
"""

data.isnull().sum()

data.info()

data[data['VendorID'].isna()]

data[(data['VendorID'].isna()) & (data['passenger_count'].isna()) & (data['RatecodeID'].isna()) & (data['store_and_fwd_flag'].isna())]

data = data.dropna()

print(data.shape)

data.isnull().sum()

"""#### **Conclusion**
*  In this data set, there are 51018 rows which have missing data.
*  There are five columns data with missing values.
*  The columns name are VendorID, passenger_count, store_and_fwd_flag, RatecodeID and payment type which have missing value.
*  As meintioned above all 51018 rows have same missing data.
*  We remove all missing value of the data beacuse these are very big data if I remove some small data then the EDA and models both are performed better with more accuracy.

## **2 Indiviual feature Visualization**

### **Histogram of the data**

* Histogram is graphical representation of data.
* It work on only numerical data.
* It is used to get overview of field of data which data types are int or float.
"""

data.hist(bins=20,figsize=(20,15));

"""#### **Conclusion**
* In this graph, there are 15 subplots according to field of data.
* The graph explain the over view of each field where data are number.

### **2.1 Store_and_fwd_flag graph**
"""

sns.countplot(x='store_and_fwd_flag', data=data);

"""#### **Conclusion**
*  This graph indicate that the maximum trip data was sent immediately to the server using app or website.
*  When the app or website or server is not work properly, the taxi driver hold the data. These data can create inconsistency or redundency in the data on the server.
*  It indicates that your server and app or wesite are working properly.
*  The data is easily maintain by the server

### **2.2 Tip amount**
"""

sns.boxenplot(data['tip_amount'])

"""*  In this graph shows that tip amount is negative but according to sense tip amount cannot be negative.
*  We need to remove that instance of data which have negative tip amount.
"""

index_tip_amount_negative=data[data['tip_amount']<0].index

data = data.drop(index_tip_amount_negative,axis=0)

sns.boxenplot(data['tip_amount'])

data['tip_amount'].describe()

"""#### **Conclusion**
*  The tip amount is not depend on any feature. The tip amount will be given when passenger are happy.
*  There are no limit of tip amount and according to data analysis the maximum tip amount is 400 USD and minimum tip amount is 0 USD.
*  The maximum number of passenger  did not give any amount of tip to taxi driver.

### **2.3 VendorID graph**
"""

sns.countplot(x='VendorID',data=data);

"""#### **Conclusion**
*  There are two vendorID 1.0 and 2.0. it indicates two companies.
*  The 2nd company (2.0) take more pickup and dropoff to the customer.
*  The graph shows that the 2nd compnay(2.0) is more larger than 1st company(1.0).
*  The 2nd company provide better services than 1st company so that the profit of 2nd company is higher than 1st company.

### **2.4 Passenger_count graph**
"""

sns.countplot(x='passenger_count',data=data)

"""#### **Conclusion**
*  This graph indicate that the customer want to travel alone.
*  The most common customers are worker so that every customer want to get services first.
*  Driver of taxi can handle maximum nine customer at a time.
*  The families are travel in the weekends.

### **2.5 Payment_type graph**
"""

sns.countplot(x='payment_type',data=data);

"""#### **Conclusion**
*  There are five type of payment methods as follow-
    *  By cash
    *  By Card (Debit or Credit card)
    *  By Paytm
    *  By GooglePay
    *  By PhonePay
* The maximum number of passenger pay amount for the services to companies by cash or by card (credit or debit card).

### **2.6 Pickup location ID and Drop off location ID**
"""

plt.figure(figsize=(20,10))
plt.subplot(2,2,1)
plt.hist(data['PULocationID'])
plt.title('Pickup Location ID')
plt.subplot(2,2,2)
plt.hist(data['DOLocationID'])
plt.title('Drop off Location ID')

"""#### **Conclusion**
* This graphs indicates that the pickup location ID and Drop off location ID both are approximate same. It means that the passenger are travel in limited area.
*  This pickup locations indicate societal  area and the drop off loacations indicate the industrial area.
*  The distance between pickup location ID's and Drop off location ID's are minor or small.

### **2.7 Day graph**
"""

data['tpep_dropoff_datetime'] = pd.to_datetime(data['tpep_dropoff_datetime']) 
data['tpep_pickup_datetime'] = pd.to_datetime(data['tpep_pickup_datetime'])

fun = lambda x:x.day_name()
data['day']=data['tpep_pickup_datetime'].apply(fun)

plt.figure(figsize=(10,5))
sns.countplot(x='day',data=data)

"""#### **Conclusion**
* Here, we can see that the maximum number of passenger use taxi on **Monday and Tuesday**.

### **2.8 Time duration graph**
Here, we calculate the time duration until the person is in taxi. We plot the graph of time duration 

The time duration will be difference of drop off time and pickup time of the passenger.
"""

data['time_duration']=data['tpep_dropoff_datetime']-data['tpep_pickup_datetime']

plt.boxplot(data['time_duration']);

"""*  We find that one instance of time duration is negative it means there are some wrong information. Because the drop off time always remain greater than pickup time. So that the time duration always positive.

*  We need to remove this type of instance where the drop off time is lower than pickup time.
"""

print(data['time_duration'].max()) # Maximum time duration
print(data['time_duration'].min()) # Minimum time duration

np.sum(data['tpep_dropoff_datetime']< data['tpep_pickup_datetime']) # number of instance where the pickup time is greater than drop off time

data[data['tpep_dropoff_datetime']<data['tpep_pickup_datetime']]  #Those row where drop off time is low.

data=data.drop(2036290,axis=0)

data.head()

plt.boxplot(data['time_duration']);

data['time_duration'].describe()

"""#### **Conclusion**
*  The maximum time duration indicate that for how much time the passenger were on trip and those passenger may be visitor or tourist person.
*  The minimum time indicate that the distance of pickup location and drop off location is minimum. 
*  For most of passenger, time duration of travelling lies between 11 minutes to 20 minutes.

### **2.9 Day of month graph**
"""

fun = lambda x:x.strftime('%d')
data['day_of_month']= data['tpep_pickup_datetime'].apply(fun)

plt.figure(figsize=(20,5))
sns.countplot(x='day_of_month', data=data);

"""#### **Conclusion**
*  In this graph, we can see clearly that in the weekends (saturday and sunday), most of customers taking rest so that taxi services will be privided to the minimum number of customers.
*  The last week of December, everyone is busy in **Christmas day and new year party** so that the graph of number of pickup is low rather than other day or normal day.
*  On **Christmas Day**(25 December 2019), there are few people travel on that day and more people are praying to God for blessing and happiness.

## **3 Feature relation**

### **3.1 Day Vs total_amount**
"""

plt.figure(figsize=(10,5))
sns.barplot(x='day',y='total_amount',data=data)

"""#### **Conclusion**
*  This graph show that total amount which include fare_amount, mta_tax, extra charge, tip_amount,toll_amount and improvement charges are varies between 17.5 USD to 20 USD for whole week.
*  The total amount is maximum on monday because everyone feel fresh and want go for work.
*  The total amount is depend on days of the week.

### **3.2 VendorID Vs Passenger_count Vs Days**
"""

plt.figure(figsize=(10,5))
sns.barplot(x='VendorID',y='passenger_count',hue='day',data=data);

"""#### **Conclusion**
*  On saturday and sunday, the maximum families or cuples want to spend time together so that number of passenger avail taxi services on weekend as compare to normal days.
*  The graph shows that the 2nd company are handle more passenger than 1st company in all day.

### **3.3 Passenger_count Vs Fare_amount with VendorID**
"""

plt.figure(figsize=(10,5))
sns.barplot(x='passenger_count', y='fare_amount',hue='VendorID',data=data)

"""#### **Conclusion**
*  In this bar plot, we can see that avrage fare_amount of 2nd company(VendorID 2.0) is high.
*  The 2nd company provide more facility to passenger than 1st company.
*  When the number of passenger are increase than fare amount will also increase.
*  The 1st company not taking eight pasenger at a time.
* When the number of passenger are vary between one to six, the fare amount of both companies are same

### **3.4 Passenger_count Vs Pickup location ID Vs VendorID**
"""

plt.figure(figsize=(20,10))
plt.subplot(2,2,1)
sns.barplot(x='passenger_count',hue='VendorID',y='PULocationID',data=data)

plt.subplot(2,2,2)
sns.barplot(x='passenger_count',hue='VendorID',y='DOLocationID',data=data)

"""#### **Conclusion**
*  The pickup and dropoff location ID are appoximate same when the number of passenger are zero to six.
*  There are big societies from location ID 150 to location ID 155, so that the taxi get more passenger on these locations.
*  There are large industrial area between 150 to 155 location ID.
*  The location ID which are below than 100, these are outside area of the New York city. So that a taxi have more number of passenger in the outside area of the New York city as compare to within New York city.

### **3.5 Passenger_count Vs mta_tax**
"""

plt.figure(figsize=(10, 5))
sns.barplot(data['passenger_count'], data['mta_tax'])

"""#### Conclusion
*  When the number of passenger are zero to six, the mta_tax is same for both campany.
*  The mta_tax is decrease with the increase of number of passenger at a time.
*  The mta_tax is very low when the number of passenger is maximum.

### **3.6 Number of pickup Vs Hours of day**
"""

fun = lambda x:x.strftime('%H')
data['hours']= data['tpep_pickup_datetime'].apply(fun)

data['hours'].describe()

plt.figure(figsize=(20,5))
sns.countplot(data['hours'])
plt.ylabel('Number of pickup')
plt.xlabel('Hour of day')
plt.show();

"""#### **Conclusion**
*  The number of pickups decrese at night from 12:00 AM to 5:00 AM becuase there are minimum number taxi service available in the night.
*  The number of pickups increase from 5:00 AM to 6:00PM because the maximum number of passenger will be available during this working hours.
*  The number of pickup are maximum from 7:00 AM to 12:00 AM because it is opening time for the industries.

## **4 Correlation between the features**
Correlation, as the name suggests, depicts a relationship between two or more features of the data.
"""

corr = data.corr()

corr

plt.figure(figsize=(10,10))
sns.heatmap(corr)

"""#### **Conclusion**
*  The negative correlation indicate the both features are inversely propotional. It means that if I increase value of one feature then the value of another feature will decrease and vice versa like-
  *  VendorID and Extra (High negative correlation)
  *  mta_tax and payment_type
*  The positive correlation indicate the both features are directly propotional it means that if I increase value of one feature then the value of another feature will also increase like-
  * fare amount and total amount (High positive correlation)
"""